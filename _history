{"entries":[{"timestamp":1760623623976,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":681,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":32,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":52,"diffs":[[1,"    \"name\": \"extention making\",\n/16/2025 11:17 AM\",\n"]]},{"start1":164,"length1":126,"diffs":[[1,"        \"main.blocks\",        \"assets.json\"\n   \"ass    \"additionalFilePaths\": []\nditor\": \"blocksprj\"\n"]]}]},{"type":"added","filename":"extension.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace extraMath {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function floor(n: number): number {\n        return Math.floor(n)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function modulo(value: number, value2: number): number {\n        return value % value2\n    }\n}\n"}]},{"timestamp":1760628461611,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"extraMath_modulo\" disabled-reasons=\"MANUALLY_DISABLED\" x=\"0\" y=\"0\"></block><block type=\"pxt-on-start\" x=\"-110\" y=\"61\"><statement name=\"HANDLER\"><block type=\"gameSplash\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"title\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"extraMath_floor\"><value name=\"n\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></value><value name=\"subtitle\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"game.splash(extraMath.floor(5))\n"]]}]},{"type":"edited","filename":"extension.ts","patch":[{"start1":0,"length1":5,"diffs":[[1,"\n"]]},{"start1":184,"length1":41,"diffs":[[1,"    Two\n"]]},{"start1":220,"length1":38,"diffs":[[1,"//% weight=100 color=#0fbc11 icon=\"\"\n"]]},{"start1":692,"length1":101,"diffs":[[1,""]]},{"start1":790,"length1":0,"diffs":[[1,"    }\n"]]},{"start1":798,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1760636262351,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":819,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":58,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":35,"diffs":[[1,"    \"name\": \"extension making 10/16/2025 11:17 AM\",\nCopy - Copy\",\n"]]},{"start1":250,"length1":44,"diffs":[[1,"        \"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1760645453325,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"gameSplash\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"1\" _input_init=\"true\"></mutation><value name=\"title\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"extraMath_modulo\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><value name=\"value2\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><value name=\"subtitle\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"extraMath_ceiling\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"game.splash(extraMath.modulo(3, 2), extraMath.ceiling(5))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":31,"diffs":[[1,"    \"name\": \"More  - Copy - Copy\",\nCopy\",\n"]]},{"start1":219,"length1":58,"diffs":[[1,"        \"    \"preferredEditor\": \"blocksprj\"\n"]]},{"start1":270,"length1":0,"diffs":[[1,"ksprj\"\ntsprj\"\n"]]}]},{"type":"edited","filename":"extension.ts","patch":[{"start1":219,"length1":72,"diffs":[[1,"    Three\n"]]},{"start1":295,"length1":21,"diffs":[[1,"namespace extraMath {\n"]]},{"start1":820,"length1":122,"diffs":[[1,"//% block\n"]]},{"start1":930,"length1":501,"diffs":[[1,""]]}]}]},{"timestamp":1760706694981,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":601,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":43,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":231,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"extension.ts","patch":[{"start1":1604,"length1":1451,"diffs":[[1,""]]}]}]},{"timestamp":1761082259655,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":511,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gameSplash\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"title\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"xtraMath_differentiate\"><value name=\"expression\"><shadow type=\"text\"><field name=\"TEXT\">x^9</field></shadow></value></block></value><value name=\"subtitle\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":40,"diffs":[[1,"game.splash(xtraMath.differentiate(\"x^9\"))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":231,"length1":7,"diffs":[[1,""]]},{"start1":262,"length1":0,"diffs":[[1,"tsprj\"\n"]]}]},{"type":"edited","filename":"extension.ts","patch":[{"start1":2381,"length1":727,"diffs":[[1,"        if (parseInt(expression.charAt(character+1))==2) {\n"]]},{"start1":2501,"length1":98,"diffs":[[1,"        let correct = true\n        while (correct) {\n            let checkAmount = 1\n            if (!(expression.charAt(character+checkAmount)=\"+\")||!(expression.charAt(character+checkAmount)=\"-\")||!(expression.charAt(character+checkAmount)=\"x\"))\n            parseInt(expression.charAt(character+checkAmount))\n        }\n        newExpression = newExpression + (parseInt(expression.charAt(character+1))-1)\n"]]},{"start1":2941,"length1":31,"diffs":[[1,""]]},{"start1":2962,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1761097130843,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":531,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gameSplash\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"title\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"xtraMath_differentiate\"><value name=\"expression\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":60,"diffs":[[1,"game.splash(xtraMath.differentiate(\"\"))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":30,"diffs":[[1,"    \"name\": \"XtraMath - Copy\",\n"]]},{"start1":238,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"extension.ts","patch":[{"start1":2946,"length1":162,"diffs":[[1,"                    newExpression = \"newExpression - \"x\"\n                }\n                else if (parseInt(expression.substr(character + 1, checkAmount))==2) {\n"]]},{"start1":3278,"length1":37,"diffs":[[1,"        character += 2\n"]]}]}]},{"timestamp":1761139264768,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gameSplash\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"title\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"xtraMath_differentiate\"><value name=\"expression\"><shadow type=\"text\"><field name=\"TEXT\">x^4783+x^333-x^2-x^1</field></shadow></value></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"game.splash(xtraMath.differentiate(\"x^4783+x^333-x^2-x^1\"))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":237,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1761149592236,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"extension.ts","patch":[{"start1":319,"length1":38,"diffs":[[1,"//% weight=100 color=#0fbc11 icon=\"➕\"\n"]]},{"start1":386,"length1":162,"diffs":[[1,"     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n"]]},{"start1":680,"length1":167,"diffs":[[1,"     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n"]]},{"start1":893,"length1":193,"diffs":[[1,"     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n"]]},{"start1":1111,"length1":188,"diffs":[[1,"     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n"]]},{"start1":1361,"length1":190,"diffs":[[1,"     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n"]]},{"start1":3315,"length1":0,"diffs":[[1,"        console.log(character)\n"]]}]}]},{"timestamp":1761165664243,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":237,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"extension.ts","patch":[{"start1":3305,"length1":112,"diffs":[[1,"                    newExpression = expression.substr(0,character-1)+\"1\"\n"]]},{"start1":3467,"length1":277,"diffs":[[1,"        } else {\n        newExpression = newExpression + \"^\"\n        newExpression = newExpression + (parseInt(expression.substr(character+1, checkAmount))-1)\n        } \n        character += checkAmount - 1\n"]]}]}]},{"timestamp":1761494868842,"editorVersion":"2.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":157,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]}]},{"timestamp":1761494878683,"editorVersion":"2.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":157,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"yeZR4su!n/}?P`zu52,q\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":237,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1760623623975,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"extention making\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1760645236089,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"\n","README.md":" ","assets.json":"","extension.ts":"    \n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two,\n    //% block=\"three\"\n    Three\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"➕\"\nnamespace extraMath {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function floor(n: number): number {\n        return Math.floor(n)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function ceiling(value: number): number {\n        return Math.ceil(value)\n    }\n//% block\n    export function modulo(value: number, value2: number): number {\n        return value % value2\n}\n}","pxt.json":"{\n    \"name\": \"More \",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"extension.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760706556431,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","extension.ts":"    \n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two,\n    //% block=\"three\"\n    Three,\n    //% block=\"four\"\n    Four,\n    //% block=\"five\"\n    Five\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"❎\"\nnamespace xtraMath {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function floor(n: number): number {\n        return Math.floor(n)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function ceiling(value: number): number {\n        return Math.ceil(value)\n    }\n\n       /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function modulo(value: number, value2: number): number {\n        return value % value2\n}\n\n   /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function sumOfRootsInPolynomialGivenFirstAndSecondCoefficients(a: number, b: number): number {\n        return -b/a\n    }\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function productOfRootsInPolynomialGivenFirstAndLastCoefficients(a: number, b: number): number {\n        return b/a\n    }\n}","pxt.json":"{\n    \"name\": \"XtraMath\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"extension.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1761081183228,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"gameSplash\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"title\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"xtraMath_differentiate\"><value name=\"expression\"><shadow type=\"text\"><field name=\"TEXT\">x^34</field></shadow></value></block></value><value name=\"subtitle\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></statement></block></xml>","main.ts":"game.splash(xtraMath.differentiate(\"x^34\"))\n","README.md":" ","assets.json":"","extension.ts":"    \n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two,\n    //% block=\"three\"\n    Three,\n    //% block=\"four\"\n    Four,\n    //% block=\"five\"\n    Five\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"➕\"\nnamespace xtraMath {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function floor(n: number): number {\n        return Math.floor(n)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function ceiling(value: number): number {\n        return Math.ceil(value)\n    }\n\n       /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function modulo(value: number, value2: number): number {\n        return value % value2\n}\n\n   /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function sumOfRootsInPolynomialGivenFirstAndSecondCoefficients(a: number, b: number): number {\n        return -b/a\n    }\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function productOfRootsInPolynomialGivenFirstAndLastCoefficients(a: number, b: number): number {\n        return b/a\n    }\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n     //% block\n     export function differentiate(expression: string): string {\n         const length = expression.length\n         let character = 1\n        let newExpression = expression.charAt(0)\n        while (character < length+1) {\n            if (expression.charAt(character)==\"+\") {\n        newExpression = newExpression + \"+\"\n        character += 1\n            } else if (expression.charAt(character)==\"-\") {\n        newExpression = newExpression + \"-\"\n            character += 1\n            } else if (expression.charAt(character)==\"x\"){\n        newExpression = newExpression + \"x\"\n        character += 1\n            } else if (expression.charAt(character)==\"^\"){\n        if (parseInt(expression.charAt(character+1))==2) {\n        } else {\n        newExpression = newExpression + \"^\"\n        const nextDegree = parseInt(expression.charAt(character+1)-1\n        newExpression = newExpression + nextDegree\n        } \n        character += 2\n            } else {\n\n        character += 1        \n            }\n        }\n         return newExpression\n     }\n}","pxt.json":"{\n    \"name\": \"XtraMath\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"extension.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761165535469,"editorVersion":"2.0.60","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\n","README.md":" ","assets.json":"","extension.ts":"    \n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two,\n    //% block=\"three\"\n    Three,\n    //% block=\"four\"\n    Four,\n    //% block=\"five\"\n    Five\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#000000 icon=\"➕\"\nnamespace xtraMath {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function floor(n: number): number {\n        return Math.floor(n)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function ceiling(value: number): number {\n        return Math.ceil(value)\n    }\n\n       /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function modulo(value: number, value2: number): number {\n        return value % value2\n}\n\n   /**\n     * Finds the sum of the real roots of a real polynomial taken equal to zero.\n     * @param firstCoefficient may be any real value\n     * @param secondCoefficient may be any real value\n     */\n    //% block\n    export function sumOfRootsInPolynomialGivenFirstAndSecondCoefficients(a: number, b: number): number {\n        return -b/a\n    }\n    /**\n     * Finds the product of the real roots of a real polynomial taken equal to zero.\n     * @param firstCoefficient may be any real value\n     * @param lastCoefficient may be any real value\n     */\n    //% block\n    export function productOfRootsInPolynomialGivenFirstAndLastCoefficients(a: number, b: number): number {\n        return b/a\n    }\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n     //% block\n     export function differentiate(expression: string): string {\n         const length = expression.length\n         let character = 1\n        let newExpression = expression.charAt(0)\n        while (character < length+1) {\n            if (expression.charAt(character)==\"+\") {\n        newExpression = newExpression + \"+\"\n        character += 1\n            } else if (expression.charAt(character)==\"-\") {\n        newExpression = newExpression + \"-\"\n            character += 1\n            } else if (expression.charAt(character)==\"x\"){\n        newExpression = newExpression + \"x\"\n        character += 1\n            } else if (expression.charAt(character)==\"^\"){\n                let correct = true\n                let checkAmount = 1\n                while (correct && character + checkAmount < length + 1) {\n                    if (!(expression.charAt(character + checkAmount) == \"+\" || expression.charAt(character + checkAmount) == \"-\" || expression.charAt(character + checkAmount) == \"x\")) {\n                        checkAmount += 1\n                    } else {\n                        correct = false\n                    }\n                }\n                if (parseInt(expression.substr(character + 1, checkAmount)) == 1) {\n                    newExpression = expression.substr(0,character-1)+\"1\"\n                } else if (parseInt(expression.substr(character + 1, checkAmount))==2) {\n        } else {\n        newExpression = newExpression + \"^\"\n        newExpression = newExpression + (parseInt(expression.substr(character+1, checkAmount))-1)\n        } \n        character += checkAmount - 1\n            } else {\n        character += 1        \n            }\n        }\n         return newExpression\n     }\n}","pxt.json":"{\n    \"name\": \"XtraMath -good\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"extension.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761179936468,"editorVersion":"2.0.60","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"gameSplash\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"title\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"xtraMath_differentiate\"><value name=\"expression\"><shadow type=\"text\"><field name=\"TEXT\">x^2+x^3+x^1</field></shadow></value></block></value><value name=\"subtitle\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></statement></block></xml>","main.ts":"game.splash(xtraMath.differentiate(\"x^2+x^3+x^1\"))\n","README.md":" ","assets.json":"","extension.ts":"    \n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two,\n    //% block=\"three\"\n    Three,\n    //% block=\"four\"\n    Four,\n    //% block=\"five\"\n    Five\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#000000 icon=\"➕\"\nnamespace xtraMath {\n    /**\n     * Finds the floor of any real value, n. In other words, it finds the closest integer to n that is also less than n.\n     * @param n may be any real constant\n     */\n    //% block\n    export function floor(n: number): number {\n        return Math.floor(n)\n    }\n\n    /**\n     * Finds the ceiling of any real value, n. In other words, it finds the closest integer to n that is also greater than n.\n     * @param n may be any real constant\n     */\n    //% block\n    export function ceiling(value: number): number {\n        return Math.ceil(value)\n    }\n\n       /**\n     * Finds the value of dividend (mod modulus), where the dividend and modulus may be any real value.\n     * @param dividend may be any real value\n     * @param modulus may be any real value\n    //% block\n    export function modulo(value: number, value2: number): number {\n        return value % value2\n}\n\n   /**\n     * Finds the sum of the real roots of a real polynomial taken equal to zero.\n     * @param firstCoefficient may be any real value\n     * @param secondCoefficient may be any real value\n     */\n    //% block\n    export function sumOfRootsInPolynomialGivenFirstAndSecondCoefficients(a: number, b: number): number {\n        return -b/a\n    }\n    /**\n     * Finds the product of the real roots of a real polynomial taken equal to zero.\n     * @param firstCoefficient may be any real value\n     * @param lastCoefficient may be any real value\n     */\n    //% block\n    export function productOfRootsInPolynomialGivenFirstAndLastCoefficients(a: number, b: number): number {\n        return b/a\n    }\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n     //% block\n     export function differentiate(expression: string): string {\n         const length = expression.length\n         let character = 1\n        let newExpression = expression.charAt(0)\n        while (character < length+1) {\n            if (expression.charAt(character)==\"+\") {\n        newExpression = newExpression + \"+\"\n        character += 1\n            } else if (expression.charAt(character)==\"-\") {\n        newExpression = newExpression + \"-\"\n            character += 1\n            } else if (expression.charAt(character)==\"x\"){\n        newExpression = newExpression + \"x\"\n        character += 1\n            } else if (expression.charAt(character)==\"^\"){\n                let correct = true\n                let checkAmount = 1\n                while (correct && character + checkAmount < length + 1) {\n                    if (!(expression.charAt(character + checkAmount) == \"+\" || expression.charAt(character + checkAmount) == \"-\" || expression.charAt(character + checkAmount) == \"x\")) {\n                        checkAmount += 1\n                    } else {\n                        correct = false\n                    }\n                }\n                if (parseInt(expression.substr(character + 1, checkAmount)) == 1) {\n                    newExpression = newExpression.substr(0,character-1)+\"1\"\n                    character += 1\n                } else if (parseInt(expression.substr(character + 1, checkAmount))==2) {\n                    character += 1\n        } else {\n        newExpression = newExpression + \"^\"\n        newExpression = newExpression + (parseInt(expression.substr(character+1, checkAmount))-1)\n        character += checkAmount - 1\n        }\n            } else {\n        character += 1        \n            }\n        }\n         return newExpression\n     }\n}","pxt.json":"{\n    \"name\": \"XtraMath -good\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"extension.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761494867962,"editorVersion":"2.0.60","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\n","README.md":" ","assets.json":"","extension.ts":"    \n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two,\n    //% block=\"three\"\n    Three,\n    //% block=\"four\"\n    Four,\n    //% block=\"five\"\n    Five\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#000000 icon=\"➕\"\nnamespace xtraMath {\n    /**\n     * Finds the floor of any real value, n. In other words, it finds the closest integer to n that is also less than n.\n     * @param n may be any real constant\n     */\n    //% block\n    export function floor(n: number): number {\n        return Math.floor(n)\n    }\n\n    /**\n     * Finds the ceiling of any real value, n. In other words, it finds the closest integer to n that is also greater than n.\n     * @param n may be any real constant\n     */\n    //% block\n    export function ceiling(value: number): number {\n        return Math.ceil(value)\n    }\n\n       /**\n     * Finds the value of dividend (mod modulus), where the dividend and modulus may be any real value.\n     * @param dividend may be any real value\n     * @param modulus may be any real value\n    //% block\n    export function modulo(value: number, value2: number): number {\n        return value % value2\n}\n\n   /**\n     * Finds the sum of the real roots of a real polynomial taken equal to zero.\n     * @param firstCoefficient may be any real value\n     * @param secondCoefficient may be any real value\n     */\n    //% block\n    export function sumOfRootsInPolynomialGivenFirstAndSecondCoefficients(a: number, b: number): number {\n        return -b/a\n    }\n    /**\n     * Finds the product of the real roots of a real polynomial taken equal to zero.\n     * @param firstCoefficient may be any real value\n     * @param lastCoefficient may be any real value\n     */\n    //% block\n    export function productOfRootsInPolynomialGivenFirstAndLastCoefficients(a: number, b: number): number {\n        return b/a\n    }\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n     //% block\n     export function differentiate(expression: string): string {\n         const length = expression.length\n         let character = 1\n        let newExpression = expression.charAt(0)\n        while (character < length+1) {\n            if (expression.charAt(character)==\"+\") {\n        newExpression = newExpression + \"+\"\n        character += 1\n            } else if (expression.charAt(character)==\"-\") {\n        newExpression = newExpression + \"-\"\n            character += 1\n            } else if (expression.charAt(character)==\"x\"){\n        newExpression = newExpression + \"x\"\n        character += 1\n            } else if (expression.charAt(character)==\"^\"){\n                let correct = true\n                let checkAmount = 1\n                while (correct && character + checkAmount < length + 1) {\n                    if (!(expression.charAt(character + checkAmount) == \"+\" || expression.charAt(character + checkAmount) == \"-\" || expression.charAt(character + checkAmount) == \"x\")) {\n                        checkAmount += 1\n                    } else {\n                        correct = false\n                    }\n                }\n                if (parseInt(expression.substr(character + 1, checkAmount)) == 1) {\n                    newExpression = newExpression.substr(0, character-1)+\"1\"\n                    character += 2\n                } else if (parseInt(expression.substr(character + 1, checkAmount))==2) {\n                    character += 2\n                } else {\n                newExpression = newExpression + \"^\"\n                newExpression = newExpression + (parseInt(expression.substr(character+1, checkAmount))-1)\n                character += checkAmount\n                }\n            } else {\n        character += 1        \n            }\n        }\n         return newExpression\n     }\n}","pxt.json":"{\n    \"name\": \"XtraMath -good\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"extension.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1761495024167}